openapi: 3.0.1
info:
  title: Shop
  version: 1.0.0
servers:
- url: /
paths:
  /user/login:
    post:
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        200:
          description: successful logged in
          content: {}

  /user/logout:
    post:
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        200:
          description: successful logout
          content: {}
  securityDefinitions: {}
  /items:
    get:
      summary: Lists Items with filters
      operationId: ListItems
      parameters:
      - name: price_min
        in: query
        description: Lower price limit
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: price_max
        in: query
        description: Upper price limit
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: list of items
          content: {}

  /items/upload_image:
    post:
      summary: uploads an image
      operationId: uploadFile
      parameters: []
      responses:
        200:
          description: image successfully loaded
          content: {}
      security:
      - api_key: []
  
  /items/{itemId}:
    get:
      summary: Find item by ID
      operationId: GetItem
      parameters:
      - name: itemId
        in: path
        description: ID of item to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        400:
          description: Invalid ID supplied
          content: {}
    put:
      summary: Updates a item in the store with form data
      operationId: UpdateItem
      parameters:
      - name: itemId
        in: path
        description: ID of item that needs to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  description: Updated name of the item
                status:
                  type: string
                  description: Updated status of the item
      responses:
        405:
          description: Invalid input
          content: {}
    delete:
      summary: Deletes a item
      operationId: DeleteItem
      parameters:
      - name: itemId
        in: path
        description: Item id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Item not found
          content: {}
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
        password:
          type: string
        User:
          type: object
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        items:
          type: array
          items:
              type: object
              properties:
                item_name:
                  type: string
                item_count:
                  type: number
                  format: int64
                item_price_per_item:
                  type: number
                  format: float
                item_total_price: 
                  type: number
                  format: float
        order_price:
          type: number
          format: float
